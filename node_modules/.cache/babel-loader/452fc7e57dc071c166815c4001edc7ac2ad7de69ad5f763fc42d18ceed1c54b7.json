{"ast":null,"code":"import _slicedToArray from\"C:/xampp/htdocs/react/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import'./App.css';import*as React from\"react\";import*as ReactDOM from\"react-dom/client\";import\"./index.css\";import About from'./Components/About';import Navbar from'./Components/Navbar';import TextForm from'./Components/TextForm';import Alert from'./Components/Alert';import{BrowserRouter as Router,// Import BrowserRouter with an alias\nRoutes,Route}from\"react-router-dom\";// Import the necessary components from react-router-dom\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState('dark'),_useState2=_slicedToArray(_useState,2),mode=_useState2[0],setMode=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),alert=_useState4[0],setAlert=_useState4[1];var showAlert=function showAlert(message,type){setAlert({msg:message,type:type});setTimeout(function(){setAlert(null);},3000);};var toggleMode=function toggleMode(){if(mode==='dark'){setMode('light');document.body.style.backgroundColor='white';document.body.style.color='black';showAlert('Light mode has been enabled','success');}else{setMode('dark');document.body.style.backgroundColor='#483D8B';document.body.style.color='white';showAlert('Dark mode has been enabled','success');}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Navbar,{title:\"ChutoPack\",mode:mode,toggleMode:toggleMode}),/*#__PURE__*/_jsx(Alert,{alert:alert}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",element:/*#__PURE__*/_jsx(TextForm,{heading:\"Enter Your Text Below\",alert:showAlert})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/about\",element:/*#__PURE__*/_jsx(About,{})})]})]})});}export default App;","map":{"version":3,"names":["useState","React","ReactDOM","About","Navbar","TextForm","Alert","BrowserRouter","Router","Routes","Route","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","mode","setMode","_useState3","_useState4","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","document","body","style","backgroundColor","color","children","title","exact","path","element","heading"],"sources":["C:/xampp/htdocs/react/my-app/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\nimport {\n  BrowserRouter as Router, // Import BrowserRouter with an alias\n  Routes,\n  Route,\n} from \"react-router-dom\"; // Import the necessary components from react-router-dom\n\nfunction App() {\n  const [mode, setMode] = useState('dark');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'dark') {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert('Light mode has been enabled', 'success')\n    } else {\n      setMode('dark')\n      document.body.style.backgroundColor = '#483D8B'\n      document.body.style.color = 'white';\n      showAlert('Dark mode has been enabled', 'success')\n    }\n  }\n\n  return (\n    <div>\n      <Router>\n        <Navbar title=\"ChutoPack\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <Routes>\n          <Route exact path=\"/\" element={<TextForm heading=\"Enter Your Text Below\" alert={showAlert} />} />\n          <Route exact path=\"/about\" element={<About />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"kHAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,WAAW,CAClB,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,MAAO,GAAK,CAAAC,QAAQ,KAAM,kBAAkB,CAC5C,MAAO,aAAa,CACpB,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,OACEC,aAAa,GAAI,CAAAC,MAAM,CAAE;AACzBC,MAAM,CACNC,KAAK,KACA,kBAAkB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE3B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,IAAAC,SAAA,CAAwBhB,QAAQ,CAAC,MAAM,CAAC,CAAAiB,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAjCG,IAAI,CAAAF,UAAA,IAAEG,OAAO,CAAAH,UAAA,IACpB,IAAAI,UAAA,CAA0BrB,QAAQ,CAAC,IAAI,CAAC,CAAAsB,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAjCE,KAAK,CAAAD,UAAA,IAAEE,QAAQ,CAAAF,UAAA,IAEtB,GAAM,CAAAG,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,OAAO,CAAEC,IAAI,CAAK,CACnCH,QAAQ,CAAC,CACPI,GAAG,CAAEF,OAAO,CACZC,IAAI,CAAEA,IACR,CAAC,CAAC,CACFE,UAAU,CAAC,UAAM,CACfL,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAED,GAAM,CAAAM,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAA,CAAS,CACvB,GAAIX,IAAI,GAAK,MAAM,CAAE,CACnBC,OAAO,CAAC,OAAO,CAAC,CAChBW,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,CAAG,OAAO,CAC7CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,KAAK,CAAG,OAAO,CACnCV,SAAS,CAAC,6BAA6B,CAAE,SAAS,CAAC,CACrD,CAAC,IAAM,CACLL,OAAO,CAAC,MAAM,CAAC,CACfW,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,CAAG,SAAS,CAC/CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,KAAK,CAAG,OAAO,CACnCV,SAAS,CAAC,4BAA4B,CAAE,SAAS,CAAC,CACpD,CACF,CAAC,CAED,mBACEb,IAAA,QAAAwB,QAAA,cACEtB,KAAA,CAACN,MAAM,EAAA4B,QAAA,eACLxB,IAAA,CAACR,MAAM,EAACiC,KAAK,CAAC,WAAW,CAAClB,IAAI,CAAEA,IAAK,CAACW,UAAU,CAAEA,UAAW,CAAE,CAAC,cAChElB,IAAA,CAACN,KAAK,EAACiB,KAAK,CAAEA,KAAM,CAAE,CAAC,cACvBT,KAAA,CAACL,MAAM,EAAA2B,QAAA,eACLxB,IAAA,CAACF,KAAK,EAAC4B,KAAK,MAACC,IAAI,CAAC,GAAG,CAACC,OAAO,cAAE5B,IAAA,CAACP,QAAQ,EAACoC,OAAO,CAAC,uBAAuB,CAAClB,KAAK,CAAEE,SAAU,CAAE,CAAE,CAAE,CAAC,cACjGb,IAAA,CAACF,KAAK,EAAC4B,KAAK,MAACC,IAAI,CAAC,QAAQ,CAACC,OAAO,cAAE5B,IAAA,CAACT,KAAK,GAAE,CAAE,CAAE,CAAC,EAC3C,CAAC,EACH,CAAC,CACN,CAAC,CAEV,CAEA,cAAe,CAAAY,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}