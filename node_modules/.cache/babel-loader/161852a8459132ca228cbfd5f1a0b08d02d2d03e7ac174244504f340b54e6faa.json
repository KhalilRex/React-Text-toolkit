{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react\\\\my-app\\\\src\\\\Components\\\\ImageToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Imaget(props) {\n  _s();\n  const [text, setText] = useState('');\n  const handleImageUpload = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const imageBase64 = reader.result;\n        const result = await Tesseract.recognize(imageBase64, 'eng');\n        const extractedText = result.data.text;\n        setText(extractedText);\n        props.alert('Text extracted from image', 'info');\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Extracted Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text.length > 0 ? text : 'No text extracted'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(Imaget, \"M8VhbSOru85VOsk7T2j5DvKRp+M=\");\n_c = Imaget;\nvar _c;\n$RefreshReg$(_c, \"Imaget\");","map":{"version":3,"names":["React","useState","Tesseract","jsxDEV","_jsxDEV","Imaget","props","_s","text","setText","handleImageUpload","event","file","target","files","reader","FileReader","onload","imageBase64","result","recognize","extractedText","data","alert","readAsDataURL","className","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/react/my-app/src/Components/ImageToText.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nexport default function Imaget(props) {\r\n    const [text, setText] = useState('');\r\n\r\n    const handleImageUpload = async (event) => {\r\n        const file = event.target.files[0];\r\n\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = async () => {\r\n                const imageBase64 = reader.result;\r\n                const result = await Tesseract.recognize(imageBase64, 'eng');\r\n                const extractedText = result.data.text;\r\n\r\n                setText(extractedText);\r\n                props.alert('Text extracted from image', 'info');\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {/* ... Other elements ... */}\r\n            <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n            />\r\n            {/* ... Other elements ... */}\r\n            <div className=\"container my-3\">\r\n                <h2>Extracted Text</h2>\r\n                <p>{text.length > 0 ? text : 'No text extracted'}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,SAASC,MAAMA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMS,iBAAiB,GAAG,MAAOC,KAAK,IAAK;IACvC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAElC,IAAIF,IAAI,EAAE;MACN,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,YAAY;QACxB,MAAMC,WAAW,GAAGH,MAAM,CAACI,MAAM;QACjC,MAAMA,MAAM,GAAG,MAAMjB,SAAS,CAACkB,SAAS,CAACF,WAAW,EAAE,KAAK,CAAC;QAC5D,MAAMG,aAAa,GAAGF,MAAM,CAACG,IAAI,CAACd,IAAI;QAEtCC,OAAO,CAACY,aAAa,CAAC;QACtBf,KAAK,CAACiB,KAAK,CAAC,2BAA2B,EAAE,MAAM,CAAC;MACpD,CAAC;MACDR,MAAM,CAACS,aAAa,CAACZ,IAAI,CAAC;IAC9B;EACJ,CAAC;EAED,oBACIR,OAAA;IAAKqB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAEtBtB,OAAA;MACIuB,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,SAAS;MAChBC,QAAQ,EAAEnB;IAAkB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eAEF7B,OAAA;MAAKqB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC3BtB,OAAA;QAAAsB,QAAA,EAAI;MAAc;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvB7B,OAAA;QAAAsB,QAAA,EAAIlB,IAAI,CAAC0B,MAAM,GAAG,CAAC,GAAG1B,IAAI,GAAG;MAAmB;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC1B,EAAA,CAnCuBF,MAAM;AAAA8B,EAAA,GAAN9B,MAAM;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}