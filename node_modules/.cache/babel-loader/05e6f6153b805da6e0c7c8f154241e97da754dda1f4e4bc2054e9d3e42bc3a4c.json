{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react\\\\my-app\\\\src\\\\Components\\\\ImageToText.js\";\nimport React, { useState } from 'react';\nimport './TextForm.css';\nimport Tesseract from 'tesseract.js'; // Import tesseract.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextForm(props) {\n  // ... Other code ...\n\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const imageBase64 = reader.result;\n        const result = await Tesseract.recognize(imageBase64, 'eng');\n        const extractedText = result.data.text;\n\n        // Set the extracted text in the textarea\n        setText(extractedText);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = TextForm;\nvar _c;\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"names":["React","useState","Tesseract","jsxDEV","_jsxDEV","Fragment","_Fragment","TextForm","props","handleImageUpload","event","file","target","files","reader","FileReader","onload","imageBase64","result","recognize","extractedText","data","text","setText","readAsDataURL","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/react/my-app/src/Components/ImageToText.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './TextForm.css';\r\nimport Tesseract from 'tesseract.js'; // Import tesseract.js\r\n\r\nexport default function TextForm(props) {\r\n    // ... Other code ...\r\n\r\n    const handleImageUpload = (event) => {\r\n        const file = event.target.files[0];\r\n        \r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = async () => {\r\n                const imageBase64 = reader.result;\r\n                const result = await Tesseract.recognize(imageBase64, 'eng');\r\n                const extractedText = result.data.text;\r\n                \r\n                // Set the extracted text in the textarea\r\n                setText(extractedText);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* ... Other elements ... */}\r\n            <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n            />\r\n            {/* ... Other elements ... */}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AACvB,OAAOC,SAAS,MAAM,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtC,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EACpC;;EAEA,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACjC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAElC,IAAIF,IAAI,EAAE;MACN,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,YAAY;QACxB,MAAMC,WAAW,GAAGH,MAAM,CAACI,MAAM;QACjC,MAAMA,MAAM,GAAG,MAAMhB,SAAS,CAACiB,SAAS,CAACF,WAAW,EAAE,KAAK,CAAC;QAC5D,MAAMG,aAAa,GAAGF,MAAM,CAACG,IAAI,CAACC,IAAI;;QAEtC;QACAC,OAAO,CAACH,aAAa,CAAC;MAC1B,CAAC;MACDN,MAAM,CAACU,aAAa,CAACb,IAAI,CAAC;IAC9B;EACJ,CAAC;EAED,oBACIP,OAAA,CAAAE,SAAA;IAAAmB,QAAA,eAEIrB,OAAA;MACIsB,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,SAAS;MAChBC,QAAQ,EAAEnB;IAAkB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B;EAAC,gBAEJ,CAAC;AAEX;AAACC,EAAA,GA/BuB1B,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}